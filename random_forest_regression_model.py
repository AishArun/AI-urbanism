# -*- coding: utf-8 -*-
"""Random Forest Regression Model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16pm8Kkazz3bl4EW7CZD6nkH2DMz09qna
"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import MinMaxScaler
import pandas as pd
from google.colab import files
uploaded = files.upload()

# Split your data into features (X) and target variable (y)
df = pd.read_csv('ThermoVision Training Dataset Final.csv') # The filename should be the name of your CSV file



# Compute the correlation matrix
corr_matrix = df.corr()

# Print the correlation matrix
print(corr_matrix)

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.show()

X = df.drop('thermalcomfort', axis=1)
y = df['thermalcomfort']

# Normalization using MinMaxScaler
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# Split your data into training set and testing set
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Initialize a Random Forest model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)

# Train the model
rf_model.fit(X_train, y_train)

# Use the model to make predictions on the test set
y_pred = rf_model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
print(f"Mean Absolute Error on test set: {mae}")

importances = rf_model.feature_importances_
feature_importances = pd.DataFrame({'Feature': X.columns, 'Importance': importances})
print(feature_importances.sort_values(by='Importance', ascending=False))

uploaded = files.upload()

new_data = pd.read_csv('Prediction (1).csv')
new_data_scaled = scaler.transform(new_data)

new_predictions = rf_model.predict(new_data_scaled)

# Create a DataFrame that includes the new data and their corresponding predictions
new_data_with_predictions = new_data.copy()  # Make a copy of the new data
new_data_with_predictions['predicted_thermal_comfort'] = new_predictions  # Add a column with the predictions

# Write the DataFrame to a CSV file
new_data_with_predictions.to_csv('new_data_with_predictions.csv', index=False)
pd.read_csv('new_data_with_predictions.csv')



# Get the feature importances
importances = rf_model.feature_importances_

# Map the feature importances to the corresponding feature names
feature_importances = pd.DataFrame({'Feature': X.columns, 'Importance': importances})

# Sort the DataFrame by importance in descending order
feature_importances = feature_importances.sort_values('Importance', ascending=False)

print(feature_importances)

from google.colab import files

# Download the file
files.download('new_data_with_predictions.csv')